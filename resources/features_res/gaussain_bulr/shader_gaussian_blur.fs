#version 330 core


// automatically generated by GenerateGaussFunctionCode in GaussianBlur.h                                                                                            
vec4 GaussianBlur7(in sampler2D tex0, in vec2 centreUV, in vec2 pixelOffset )                                                                           
{                                                                                                                                                                    
    vec4 colOut = vec4( 0, 0, 0,0);                                                                                                                                   
                                                                                                                                                                     
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
    // Kernel width 7 x 7
    //
    const int stepCount = 2;
    //
    const float gWeights[stepCount] = float[](
       0.44908,0.05092
    );
    const float gOffsets[stepCount] = float[](
       0.53805,
       2.06278
    );
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
                                                                                                                                                                     
    for( int i = 0; i < stepCount; i++ )                                                                                                                             
    {                                                                                                                                                                
        vec2 texCoordOffset = gOffsets[i] * pixelOffset;                                                                                                           
        vec4 col = texture( tex0, centreUV + texCoordOffset ) + texture( tex0, centreUV - texCoordOffset );                                                
        colOut += gWeights[i] * col;                                                                                                                               
    }                                                                                                                                                                                                                                                                                                                              
    return colOut;                                                                                                                                                   
}                                                                                                                                                                    



// automatically generated by GenerateGaussFunctionCode in GaussianBlur.h                                                                                            
vec4 GaussianBlur15(in sampler2D tex0, in vec2 centreUV, in vec2 pixelOffset )                                                                           
{                                                                                                                                                                    
    vec4 colOut = vec4( 0, 0, 0,0);                                                                                                                               
                                                                                                                                                                     
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
    // Kernel width 15 x 15
    //
    const int stepCount = 4;
    //
    const float gWeights[stepCount] =float[](
       0.24961,
       0.19246,
       0.05148,
       0.00645
    );
    const float gOffsets[stepCount] =float[](
       0.64434,
       2.37885,
       4.29111,
       6.21661
    );
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
                                                                                                                                                                     
    for( int i = 0; i < stepCount; i++ )                                                                                                                             
    {                                                                                                                                                                
        vec2 texCoordOffset = gOffsets[i] * pixelOffset;                                                                                                           
        vec4 col = texture( tex0, centreUV + texCoordOffset ) + texture( tex0, centreUV - texCoordOffset );                                                
        colOut += gWeights[i] * col;                                                                                                                               
    }                                                                                                                                                                
                                                                                                                                                                     
    return colOut;                                                                                                                                                   
}                                                                                                                                                                    


// automatically generated by GenerateGaussFunctionCode in GaussianBlur.h                                                                                            
vec4 GaussianBlur23(in sampler2D tex0, in vec2 centreUV, in vec2 pixelOffset )                                                                           
{                                                                                                                                                                    
    vec4 colOut = vec4( 0, 0, 0,0);                                                                                                                                  
                                                                                                                                                                     
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
    // Kernel width 23 x 23
    //
    const int stepCount = 6;
    //
    const float gWeights[stepCount] =float[](
       0.16501,
       0.17507,
       0.10112,
       0.04268,
       0.01316,
       0.00296
    );
    const float gOffsets[stepCount] =float[](
       0.65772,
       2.45017,
       4.41096,
       6.37285,
       8.33626,
       10.30153
    );
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
                                                                                                                                                                     
    for( int i = 0; i < stepCount; i++ )                                                                                                                             
    {                                                                                                                                                                
        vec2 texCoordOffset = gOffsets[i] * pixelOffset;                                                                                                           
        vec4 col = texture( tex0, centreUV + texCoordOffset ) + texture( tex0, centreUV - texCoordOffset );                                                
        colOut += gWeights[i] * col;                                                                                                                               
    }                                                                                                                                                                
                                                                                                                                                                     
    return colOut;                                                                                                                                                   
}                                                                                                                                                                    



vec4 GaussianBlur35(in sampler2D tex0, in vec2 centreUV, in vec2 pixelOffset )                                                                           
{                                                                                                                                                                    
    vec4 colOut = vec4( 0, 0, 0,0);                                                                                                                              
                                                                                                                                                                     
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
    // Kernel width 35 x 35
    //
    const int stepCount = 9;
    //
    const float gWeights[stepCount] = float[](
       0.10855,
       0.13135,
       0.10406,
       0.07216,
       0.04380,
       0.02328,
       0.01083,
       0.00441,
       0.00157
    );
    const float gOffsets[stepCount] = float[](
       0.66293,
       2.47904,
       4.46232,
       6.44568,
       8.42917,
       10.41281,
       12.39664,
       14.38070,
       16.36501
    );
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
                                                                                                                                                                     
    for( int i = 0; i < stepCount; i++ )                                                                                                                             
    {                                                                                                                                                                
        vec2 texCoordOffset = gOffsets[i] * pixelOffset;                                                                                                           
        vec4 col = texture( tex0, centreUV + texCoordOffset ) + texture( tex0, centreUV - texCoordOffset );                                                
        colOut += gWeights[i] * col;                                                                                                                               
    }                                                                                                                                                                
                                                                                                                                                                     
    return colOut;                                                                                                                                                   
}   

vec4 GaussianBlur63( sampler2D tex0, vec2 centreUV, vec2 pixelOffset )                                                                           
{                                                                                                                                                                    
    vec4 colOut = vec4( 0, 0, 0, 0 );                                                                                                                                   

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;
    // Kernel width 63 x 63
    //
    const int stepCount = 16;
    //
    const float gWeights[stepCount] =  float[](
       0.05991,
       0.07758,
       0.07232,
       0.06476,
       0.05571,
       0.04604,
       0.03655,
       0.02788,
       0.02042,
       0.01438,
       0.00972,
       0.00631,
       0.00394,
       0.00236,
       0.00136,
       0.00075
    );
    const float gOffsets[stepCount] =  float[](
       0.66555,
       2.49371,
       4.48868,
       6.48366,
       8.47864,
       10.47362,
       12.46860,
       14.46360,
       16.45860,
       18.45361,
       20.44863,
       22.44365,
       24.43869,
       26.43375,
       28.42881,
       30.42389
    );
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////;

    for( int i = 0; i < stepCount; i++ )                                                                                                                             
    {                                                                                                                                                                
        vec2 texCoordOffset = gOffsets[i] * pixelOffset;                                                                                                           
        vec4 col = texture( tex0, centreUV + texCoordOffset ) + texture( tex0, centreUV - texCoordOffset );                                                
        colOut += gWeights[i] * col;                                                                                                                               
    }                                                                                                                                                                

    return colOut;                                                                                                                                                   
}


out vec4 FragColor;
in vec3  DefaultColor;
in vec2  TexCoords;

uniform sampler2D imageTexture;
uniform sampler2D filterZones;
uniform float kernelPixelSizeX;
uniform float kernelPixelSizeY;

//7 15 23 35 63
//[0-13] 7x7
//[14-27] 15x15
//[28-41] 23x23
//[42-55] 35x35
//[56-69] 63x63

void main(){
    vec2 uv = TexCoords;
    vec4 kernalSizeV4 = texture(filterZones,uv);
    float filterSize = kernalSizeV4.x*255;//scale back to 0-255
    if(filterSize <= 13.0)
    {   float pixelOffsetX = kernelPixelSizeX*(filterSize/7.0);
        float pixelOffsetY = kernelPixelSizeY*(filterSize/7.0);
        FragColor = GaussianBlur7(imageTexture,uv,vec2(pixelOffsetX,0.0));
        FragColor += GaussianBlur7(imageTexture,uv,vec2(0.0,pixelOffsetY));
        FragColor = FragColor/2.0;
    }
    else if(filterSize > 13.0 && filterSize <= 27.0)
    {
        float pixelOffsetX = kernelPixelSizeX*(filterSize/15.0);
        float pixelOffsetY = kernelPixelSizeY*(filterSize/15.0);
        FragColor = GaussianBlur15(imageTexture,uv,vec2(pixelOffsetX,0.0));
        FragColor += GaussianBlur15(imageTexture,uv,vec2(0.0,pixelOffsetY));
        FragColor = FragColor/2.0;
    }
    else if(filterSize > 27.0 && filterSize <= 41.0)
    {
        float pixelOffsetX = kernelPixelSizeX*(filterSize/23.0);
        float pixelOffsetY = kernelPixelSizeY*(filterSize/23.0);
        FragColor = GaussianBlur23(imageTexture,uv,vec2(pixelOffsetX,0.0));
        FragColor += GaussianBlur23(imageTexture,uv,vec2(0.0,pixelOffsetY));
        FragColor = FragColor/2.0;
    }
    else if(filterSize > 41.0 && filterSize <= 55.0){
        float pixelOffsetX = kernelPixelSizeX*(filterSize/35.0);
        float pixelOffsetY = kernelPixelSizeY*(filterSize/35.0);
        FragColor = GaussianBlur35(imageTexture,uv,vec2(pixelOffsetX,0.0));
        FragColor += GaussianBlur35(imageTexture,uv,vec2(0.0,pixelOffsetY));
        FragColor = FragColor/2.0;
    }
    else{
        float pixelOffsetX = kernelPixelSizeX*(filterSize/63.0);
        float pixelOffsetY = kernelPixelSizeY*(filterSize/63.0);
        FragColor = GaussianBlur63(imageTexture,uv,vec2(pixelOffsetX,0.0));
        FragColor += GaussianBlur63(imageTexture,uv,vec2(0.0,pixelOffsetY));
        FragColor = FragColor/2.0;
    }
}